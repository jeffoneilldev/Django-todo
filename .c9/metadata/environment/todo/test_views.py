{"filter":false,"title":"test_views.py","tooltip":"/todo/test_views.py","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["from django.test import TestCase","from .models import Item","","","class TestViews(TestCase):","","    def test_get_home_page(self):","        page = self.client.get(\"/\")","        self.assertEqual(page.status_code, 200)","        self.assertTemplateUsed(page, \"todo_list.html\")","    ","    def test_get_add_item_page(self):","        page = self.client.get(\"/add\")","        self.assertEqual(page.status_code, 200)","        self.assertTemplateUsed(page, \"item_form.html\")","    ","    def test_get_edit_item_page(self):","        item = Item(name=\"Create a Test\")","        item.save()","","        page = self.client.get(\"/edit/{0}\".format(item.id))","        self.assertEqual(page.status_code, 200)","        self.assertTemplateUsed(page, \"item_form.html\")","    ","    def test_get_edit_page_for_item_that_does_not_exist(self):","        page = self.client.get(\"/edit/1\")","        self.assertEqual(page.status_code, 404)",""],"id":1}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["",""],"id":3}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":28,"column":0},"end":{"row":28,"column":1},"action":"insert","lines":[" "]},{"start":{"row":28,"column":1},"end":{"row":28,"column":2},"action":"insert","lines":[" "]},{"start":{"row":28,"column":2},"end":{"row":28,"column":3},"action":"insert","lines":[" "]},{"start":{"row":28,"column":3},"end":{"row":28,"column":4},"action":"insert","lines":[" "]}],[{"start":{"row":28,"column":4},"end":{"row":51,"column":41},"action":"insert","lines":["def test_post_create_an_item(self):","        response = self.client.post(\"/add\", {\"name\": \"Create a Test\"})","        item = get_object_or_404(Item, pk=1)","        self.assertEqual(item.done, False)","    ","    def test_post_edit_an_item(self):","        item = Item(name=\"Create a Test\")","        item.save()","        id = item.id","","        response = self.client.post(\"/edit/{0}\".format(id), {\"name\": \"A different name\"})","        item = get_object_or_404(Item, pk=id)","","        self.assertEqual(\"A different name\", item.name)","    ","    def test_toggle_status(self):","        item = Item(name=\"Create a Test\")","        item.save()","        id = item.id","","        response = self.client.post(\"/toggle/{0}\".format(id))","","        item = get_object_or_404(Item, pk=id)","        self.assertEqual(item.done, True)"],"id":5}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":24},"action":"remove","lines":["from .models import Item"],"id":6},{"start":{"row":1,"column":0},"end":{"row":2,"column":24},"action":"insert","lines":["from django.shortcuts import get_object_or_404","from .models import Item"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":24},"end":{"row":2,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1562352210225,"hash":"b5790d0e4a0bb4111297fc8015c4c353e64fa325"}